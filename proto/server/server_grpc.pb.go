// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package server

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// OpenAbyssClient is the client API for OpenAbyss service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OpenAbyssClient interface {
	// Obtains the Stored Key Names
	GetKeyNames(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*GetKeyNamesResponse, error)
	// Lists stored path contents
	ListPathContents(ctx context.Context, in *ListPathContentRequest, opts ...grpc.CallOption) (*PathContent, error)
}

type openAbyssClient struct {
	cc grpc.ClientConnInterface
}

func NewOpenAbyssClient(cc grpc.ClientConnInterface) OpenAbyssClient {
	return &openAbyssClient{cc}
}

func (c *openAbyssClient) GetKeyNames(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*GetKeyNamesResponse, error) {
	out := new(GetKeyNamesResponse)
	err := c.cc.Invoke(ctx, "/server.OpenAbyss/GetKeyNames", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *openAbyssClient) ListPathContents(ctx context.Context, in *ListPathContentRequest, opts ...grpc.CallOption) (*PathContent, error) {
	out := new(PathContent)
	err := c.cc.Invoke(ctx, "/server.OpenAbyss/ListPathContents", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OpenAbyssServer is the server API for OpenAbyss service.
// All implementations must embed UnimplementedOpenAbyssServer
// for forward compatibility
type OpenAbyssServer interface {
	// Obtains the Stored Key Names
	GetKeyNames(context.Context, *EmptyRequest) (*GetKeyNamesResponse, error)
	// Lists stored path contents
	ListPathContents(context.Context, *ListPathContentRequest) (*PathContent, error)
	mustEmbedUnimplementedOpenAbyssServer()
}

// UnimplementedOpenAbyssServer must be embedded to have forward compatible implementations.
type UnimplementedOpenAbyssServer struct {
}

func (UnimplementedOpenAbyssServer) GetKeyNames(context.Context, *EmptyRequest) (*GetKeyNamesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetKeyNames not implemented")
}
func (UnimplementedOpenAbyssServer) ListPathContents(context.Context, *ListPathContentRequest) (*PathContent, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPathContents not implemented")
}
func (UnimplementedOpenAbyssServer) mustEmbedUnimplementedOpenAbyssServer() {}

// UnsafeOpenAbyssServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OpenAbyssServer will
// result in compilation errors.
type UnsafeOpenAbyssServer interface {
	mustEmbedUnimplementedOpenAbyssServer()
}

func RegisterOpenAbyssServer(s grpc.ServiceRegistrar, srv OpenAbyssServer) {
	s.RegisterService(&OpenAbyss_ServiceDesc, srv)
}

func _OpenAbyss_GetKeyNames_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpenAbyssServer).GetKeyNames(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/server.OpenAbyss/GetKeyNames",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpenAbyssServer).GetKeyNames(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OpenAbyss_ListPathContents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPathContentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpenAbyssServer).ListPathContents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/server.OpenAbyss/ListPathContents",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpenAbyssServer).ListPathContents(ctx, req.(*ListPathContentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// OpenAbyss_ServiceDesc is the grpc.ServiceDesc for OpenAbyss service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OpenAbyss_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "server.OpenAbyss",
	HandlerType: (*OpenAbyssServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetKeyNames",
			Handler:    _OpenAbyss_GetKeyNames_Handler,
		},
		{
			MethodName: "ListPathContents",
			Handler:    _OpenAbyss_ListPathContents_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/server/server.proto",
}
