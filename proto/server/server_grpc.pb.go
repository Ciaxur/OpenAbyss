// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package server

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// OpenAbyssClient is the client API for OpenAbyss service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OpenAbyssClient interface {
	// Obtains the Stored Key Names
	GetKeyNames(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*GetKeyNamesResponse, error)
	// Obtains Stored Public Keys
	GetKeys(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*GetKeysResponse, error)
	// Generates new Keypair
	GenerateKeyPair(ctx context.Context, in *GenerateEntityRequest, opts ...grpc.CallOption) (*Entity, error)
	// Modify/Remove keypair
	ModifyKeyPair(ctx context.Context, in *EntityModifyRequest, opts ...grpc.CallOption) (*Entity, error)
	RemoveKeyPair(ctx context.Context, in *EntityRemoveRequest, opts ...grpc.CallOption) (*Entity, error)
	// Encrypt/Decrypt File
	EncryptFile(ctx context.Context, in *FilePacket, opts ...grpc.CallOption) (*EncryptResult, error)
	DecryptFile(ctx context.Context, in *DecryptRequest, opts ...grpc.CallOption) (*FilePacket, error)
	// Internal FileStorage Mods
	ModifyEntity(ctx context.Context, in *EntityMod, opts ...grpc.CallOption) (*EmptyMessage, error)
	// Lists stored path contents
	ListPathContents(ctx context.Context, in *ListPathContentRequest, opts ...grpc.CallOption) (*PathResponse, error)
	ListInternalBackups(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*BackupEntries, error)
	InvokeNewStorageBackup(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*BackupEntry, error)
	// Backup Manager Requests
	GetBackupManagerConfig(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*BackupManagerStatus, error)
	SetBackupManagerConfig(ctx context.Context, in *BackupManagerStatus, opts ...grpc.CallOption) (*BackupManagerStatus, error)
	DeleteBackup(ctx context.Context, in *BackupEntryRequest, opts ...grpc.CallOption) (*BackupEntry, error)
	ExportBackup(ctx context.Context, in *BackupEntryRequest, opts ...grpc.CallOption) (*ExportedBackupResponse, error)
	ImportBackup(ctx context.Context, in *ImportBackupRequest, opts ...grpc.CallOption) (*EmptyMessage, error)
	RestoreFromBackup(ctx context.Context, in *RestoreFromBackupRequest, opts ...grpc.CallOption) (*BackupEntry, error)
}

type openAbyssClient struct {
	cc grpc.ClientConnInterface
}

func NewOpenAbyssClient(cc grpc.ClientConnInterface) OpenAbyssClient {
	return &openAbyssClient{cc}
}

func (c *openAbyssClient) GetKeyNames(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*GetKeyNamesResponse, error) {
	out := new(GetKeyNamesResponse)
	err := c.cc.Invoke(ctx, "/server.OpenAbyss/GetKeyNames", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *openAbyssClient) GetKeys(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*GetKeysResponse, error) {
	out := new(GetKeysResponse)
	err := c.cc.Invoke(ctx, "/server.OpenAbyss/GetKeys", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *openAbyssClient) GenerateKeyPair(ctx context.Context, in *GenerateEntityRequest, opts ...grpc.CallOption) (*Entity, error) {
	out := new(Entity)
	err := c.cc.Invoke(ctx, "/server.OpenAbyss/GenerateKeyPair", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *openAbyssClient) ModifyKeyPair(ctx context.Context, in *EntityModifyRequest, opts ...grpc.CallOption) (*Entity, error) {
	out := new(Entity)
	err := c.cc.Invoke(ctx, "/server.OpenAbyss/ModifyKeyPair", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *openAbyssClient) RemoveKeyPair(ctx context.Context, in *EntityRemoveRequest, opts ...grpc.CallOption) (*Entity, error) {
	out := new(Entity)
	err := c.cc.Invoke(ctx, "/server.OpenAbyss/RemoveKeyPair", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *openAbyssClient) EncryptFile(ctx context.Context, in *FilePacket, opts ...grpc.CallOption) (*EncryptResult, error) {
	out := new(EncryptResult)
	err := c.cc.Invoke(ctx, "/server.OpenAbyss/EncryptFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *openAbyssClient) DecryptFile(ctx context.Context, in *DecryptRequest, opts ...grpc.CallOption) (*FilePacket, error) {
	out := new(FilePacket)
	err := c.cc.Invoke(ctx, "/server.OpenAbyss/DecryptFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *openAbyssClient) ModifyEntity(ctx context.Context, in *EntityMod, opts ...grpc.CallOption) (*EmptyMessage, error) {
	out := new(EmptyMessage)
	err := c.cc.Invoke(ctx, "/server.OpenAbyss/ModifyEntity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *openAbyssClient) ListPathContents(ctx context.Context, in *ListPathContentRequest, opts ...grpc.CallOption) (*PathResponse, error) {
	out := new(PathResponse)
	err := c.cc.Invoke(ctx, "/server.OpenAbyss/ListPathContents", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *openAbyssClient) ListInternalBackups(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*BackupEntries, error) {
	out := new(BackupEntries)
	err := c.cc.Invoke(ctx, "/server.OpenAbyss/ListInternalBackups", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *openAbyssClient) InvokeNewStorageBackup(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*BackupEntry, error) {
	out := new(BackupEntry)
	err := c.cc.Invoke(ctx, "/server.OpenAbyss/InvokeNewStorageBackup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *openAbyssClient) GetBackupManagerConfig(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*BackupManagerStatus, error) {
	out := new(BackupManagerStatus)
	err := c.cc.Invoke(ctx, "/server.OpenAbyss/GetBackupManagerConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *openAbyssClient) SetBackupManagerConfig(ctx context.Context, in *BackupManagerStatus, opts ...grpc.CallOption) (*BackupManagerStatus, error) {
	out := new(BackupManagerStatus)
	err := c.cc.Invoke(ctx, "/server.OpenAbyss/SetBackupManagerConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *openAbyssClient) DeleteBackup(ctx context.Context, in *BackupEntryRequest, opts ...grpc.CallOption) (*BackupEntry, error) {
	out := new(BackupEntry)
	err := c.cc.Invoke(ctx, "/server.OpenAbyss/DeleteBackup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *openAbyssClient) ExportBackup(ctx context.Context, in *BackupEntryRequest, opts ...grpc.CallOption) (*ExportedBackupResponse, error) {
	out := new(ExportedBackupResponse)
	err := c.cc.Invoke(ctx, "/server.OpenAbyss/ExportBackup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *openAbyssClient) ImportBackup(ctx context.Context, in *ImportBackupRequest, opts ...grpc.CallOption) (*EmptyMessage, error) {
	out := new(EmptyMessage)
	err := c.cc.Invoke(ctx, "/server.OpenAbyss/ImportBackup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *openAbyssClient) RestoreFromBackup(ctx context.Context, in *RestoreFromBackupRequest, opts ...grpc.CallOption) (*BackupEntry, error) {
	out := new(BackupEntry)
	err := c.cc.Invoke(ctx, "/server.OpenAbyss/RestoreFromBackup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OpenAbyssServer is the server API for OpenAbyss service.
// All implementations must embed UnimplementedOpenAbyssServer
// for forward compatibility
type OpenAbyssServer interface {
	// Obtains the Stored Key Names
	GetKeyNames(context.Context, *EmptyMessage) (*GetKeyNamesResponse, error)
	// Obtains Stored Public Keys
	GetKeys(context.Context, *EmptyMessage) (*GetKeysResponse, error)
	// Generates new Keypair
	GenerateKeyPair(context.Context, *GenerateEntityRequest) (*Entity, error)
	// Modify/Remove keypair
	ModifyKeyPair(context.Context, *EntityModifyRequest) (*Entity, error)
	RemoveKeyPair(context.Context, *EntityRemoveRequest) (*Entity, error)
	// Encrypt/Decrypt File
	EncryptFile(context.Context, *FilePacket) (*EncryptResult, error)
	DecryptFile(context.Context, *DecryptRequest) (*FilePacket, error)
	// Internal FileStorage Mods
	ModifyEntity(context.Context, *EntityMod) (*EmptyMessage, error)
	// Lists stored path contents
	ListPathContents(context.Context, *ListPathContentRequest) (*PathResponse, error)
	ListInternalBackups(context.Context, *EmptyMessage) (*BackupEntries, error)
	InvokeNewStorageBackup(context.Context, *EmptyMessage) (*BackupEntry, error)
	// Backup Manager Requests
	GetBackupManagerConfig(context.Context, *EmptyMessage) (*BackupManagerStatus, error)
	SetBackupManagerConfig(context.Context, *BackupManagerStatus) (*BackupManagerStatus, error)
	DeleteBackup(context.Context, *BackupEntryRequest) (*BackupEntry, error)
	ExportBackup(context.Context, *BackupEntryRequest) (*ExportedBackupResponse, error)
	ImportBackup(context.Context, *ImportBackupRequest) (*EmptyMessage, error)
	RestoreFromBackup(context.Context, *RestoreFromBackupRequest) (*BackupEntry, error)
	mustEmbedUnimplementedOpenAbyssServer()
}

// UnimplementedOpenAbyssServer must be embedded to have forward compatible implementations.
type UnimplementedOpenAbyssServer struct {
}

func (UnimplementedOpenAbyssServer) GetKeyNames(context.Context, *EmptyMessage) (*GetKeyNamesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetKeyNames not implemented")
}
func (UnimplementedOpenAbyssServer) GetKeys(context.Context, *EmptyMessage) (*GetKeysResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetKeys not implemented")
}
func (UnimplementedOpenAbyssServer) GenerateKeyPair(context.Context, *GenerateEntityRequest) (*Entity, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateKeyPair not implemented")
}
func (UnimplementedOpenAbyssServer) ModifyKeyPair(context.Context, *EntityModifyRequest) (*Entity, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ModifyKeyPair not implemented")
}
func (UnimplementedOpenAbyssServer) RemoveKeyPair(context.Context, *EntityRemoveRequest) (*Entity, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveKeyPair not implemented")
}
func (UnimplementedOpenAbyssServer) EncryptFile(context.Context, *FilePacket) (*EncryptResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EncryptFile not implemented")
}
func (UnimplementedOpenAbyssServer) DecryptFile(context.Context, *DecryptRequest) (*FilePacket, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DecryptFile not implemented")
}
func (UnimplementedOpenAbyssServer) ModifyEntity(context.Context, *EntityMod) (*EmptyMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ModifyEntity not implemented")
}
func (UnimplementedOpenAbyssServer) ListPathContents(context.Context, *ListPathContentRequest) (*PathResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPathContents not implemented")
}
func (UnimplementedOpenAbyssServer) ListInternalBackups(context.Context, *EmptyMessage) (*BackupEntries, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListInternalBackups not implemented")
}
func (UnimplementedOpenAbyssServer) InvokeNewStorageBackup(context.Context, *EmptyMessage) (*BackupEntry, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InvokeNewStorageBackup not implemented")
}
func (UnimplementedOpenAbyssServer) GetBackupManagerConfig(context.Context, *EmptyMessage) (*BackupManagerStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBackupManagerConfig not implemented")
}
func (UnimplementedOpenAbyssServer) SetBackupManagerConfig(context.Context, *BackupManagerStatus) (*BackupManagerStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetBackupManagerConfig not implemented")
}
func (UnimplementedOpenAbyssServer) DeleteBackup(context.Context, *BackupEntryRequest) (*BackupEntry, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBackup not implemented")
}
func (UnimplementedOpenAbyssServer) ExportBackup(context.Context, *BackupEntryRequest) (*ExportedBackupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExportBackup not implemented")
}
func (UnimplementedOpenAbyssServer) ImportBackup(context.Context, *ImportBackupRequest) (*EmptyMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ImportBackup not implemented")
}
func (UnimplementedOpenAbyssServer) RestoreFromBackup(context.Context, *RestoreFromBackupRequest) (*BackupEntry, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RestoreFromBackup not implemented")
}
func (UnimplementedOpenAbyssServer) mustEmbedUnimplementedOpenAbyssServer() {}

// UnsafeOpenAbyssServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OpenAbyssServer will
// result in compilation errors.
type UnsafeOpenAbyssServer interface {
	mustEmbedUnimplementedOpenAbyssServer()
}

func RegisterOpenAbyssServer(s grpc.ServiceRegistrar, srv OpenAbyssServer) {
	s.RegisterService(&OpenAbyss_ServiceDesc, srv)
}

func _OpenAbyss_GetKeyNames_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpenAbyssServer).GetKeyNames(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/server.OpenAbyss/GetKeyNames",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpenAbyssServer).GetKeyNames(ctx, req.(*EmptyMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _OpenAbyss_GetKeys_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpenAbyssServer).GetKeys(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/server.OpenAbyss/GetKeys",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpenAbyssServer).GetKeys(ctx, req.(*EmptyMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _OpenAbyss_GenerateKeyPair_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateEntityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpenAbyssServer).GenerateKeyPair(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/server.OpenAbyss/GenerateKeyPair",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpenAbyssServer).GenerateKeyPair(ctx, req.(*GenerateEntityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OpenAbyss_ModifyKeyPair_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EntityModifyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpenAbyssServer).ModifyKeyPair(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/server.OpenAbyss/ModifyKeyPair",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpenAbyssServer).ModifyKeyPair(ctx, req.(*EntityModifyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OpenAbyss_RemoveKeyPair_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EntityRemoveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpenAbyssServer).RemoveKeyPair(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/server.OpenAbyss/RemoveKeyPair",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpenAbyssServer).RemoveKeyPair(ctx, req.(*EntityRemoveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OpenAbyss_EncryptFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FilePacket)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpenAbyssServer).EncryptFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/server.OpenAbyss/EncryptFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpenAbyssServer).EncryptFile(ctx, req.(*FilePacket))
	}
	return interceptor(ctx, in, info, handler)
}

func _OpenAbyss_DecryptFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DecryptRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpenAbyssServer).DecryptFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/server.OpenAbyss/DecryptFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpenAbyssServer).DecryptFile(ctx, req.(*DecryptRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OpenAbyss_ModifyEntity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EntityMod)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpenAbyssServer).ModifyEntity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/server.OpenAbyss/ModifyEntity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpenAbyssServer).ModifyEntity(ctx, req.(*EntityMod))
	}
	return interceptor(ctx, in, info, handler)
}

func _OpenAbyss_ListPathContents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPathContentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpenAbyssServer).ListPathContents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/server.OpenAbyss/ListPathContents",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpenAbyssServer).ListPathContents(ctx, req.(*ListPathContentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OpenAbyss_ListInternalBackups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpenAbyssServer).ListInternalBackups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/server.OpenAbyss/ListInternalBackups",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpenAbyssServer).ListInternalBackups(ctx, req.(*EmptyMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _OpenAbyss_InvokeNewStorageBackup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpenAbyssServer).InvokeNewStorageBackup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/server.OpenAbyss/InvokeNewStorageBackup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpenAbyssServer).InvokeNewStorageBackup(ctx, req.(*EmptyMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _OpenAbyss_GetBackupManagerConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpenAbyssServer).GetBackupManagerConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/server.OpenAbyss/GetBackupManagerConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpenAbyssServer).GetBackupManagerConfig(ctx, req.(*EmptyMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _OpenAbyss_SetBackupManagerConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BackupManagerStatus)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpenAbyssServer).SetBackupManagerConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/server.OpenAbyss/SetBackupManagerConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpenAbyssServer).SetBackupManagerConfig(ctx, req.(*BackupManagerStatus))
	}
	return interceptor(ctx, in, info, handler)
}

func _OpenAbyss_DeleteBackup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BackupEntryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpenAbyssServer).DeleteBackup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/server.OpenAbyss/DeleteBackup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpenAbyssServer).DeleteBackup(ctx, req.(*BackupEntryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OpenAbyss_ExportBackup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BackupEntryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpenAbyssServer).ExportBackup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/server.OpenAbyss/ExportBackup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpenAbyssServer).ExportBackup(ctx, req.(*BackupEntryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OpenAbyss_ImportBackup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImportBackupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpenAbyssServer).ImportBackup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/server.OpenAbyss/ImportBackup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpenAbyssServer).ImportBackup(ctx, req.(*ImportBackupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OpenAbyss_RestoreFromBackup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RestoreFromBackupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpenAbyssServer).RestoreFromBackup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/server.OpenAbyss/RestoreFromBackup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpenAbyssServer).RestoreFromBackup(ctx, req.(*RestoreFromBackupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// OpenAbyss_ServiceDesc is the grpc.ServiceDesc for OpenAbyss service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OpenAbyss_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "server.OpenAbyss",
	HandlerType: (*OpenAbyssServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetKeyNames",
			Handler:    _OpenAbyss_GetKeyNames_Handler,
		},
		{
			MethodName: "GetKeys",
			Handler:    _OpenAbyss_GetKeys_Handler,
		},
		{
			MethodName: "GenerateKeyPair",
			Handler:    _OpenAbyss_GenerateKeyPair_Handler,
		},
		{
			MethodName: "ModifyKeyPair",
			Handler:    _OpenAbyss_ModifyKeyPair_Handler,
		},
		{
			MethodName: "RemoveKeyPair",
			Handler:    _OpenAbyss_RemoveKeyPair_Handler,
		},
		{
			MethodName: "EncryptFile",
			Handler:    _OpenAbyss_EncryptFile_Handler,
		},
		{
			MethodName: "DecryptFile",
			Handler:    _OpenAbyss_DecryptFile_Handler,
		},
		{
			MethodName: "ModifyEntity",
			Handler:    _OpenAbyss_ModifyEntity_Handler,
		},
		{
			MethodName: "ListPathContents",
			Handler:    _OpenAbyss_ListPathContents_Handler,
		},
		{
			MethodName: "ListInternalBackups",
			Handler:    _OpenAbyss_ListInternalBackups_Handler,
		},
		{
			MethodName: "InvokeNewStorageBackup",
			Handler:    _OpenAbyss_InvokeNewStorageBackup_Handler,
		},
		{
			MethodName: "GetBackupManagerConfig",
			Handler:    _OpenAbyss_GetBackupManagerConfig_Handler,
		},
		{
			MethodName: "SetBackupManagerConfig",
			Handler:    _OpenAbyss_SetBackupManagerConfig_Handler,
		},
		{
			MethodName: "DeleteBackup",
			Handler:    _OpenAbyss_DeleteBackup_Handler,
		},
		{
			MethodName: "ExportBackup",
			Handler:    _OpenAbyss_ExportBackup_Handler,
		},
		{
			MethodName: "ImportBackup",
			Handler:    _OpenAbyss_ImportBackup_Handler,
		},
		{
			MethodName: "RestoreFromBackup",
			Handler:    _OpenAbyss_RestoreFromBackup_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "server.proto",
}
