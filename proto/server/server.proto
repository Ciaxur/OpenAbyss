syntax = "proto3";

package server;
option go_package = "proto/server";

service OpenAbyss {
  // Obtains the Stored Key Names
  rpc GetKeyNames(EmptyMessage) returns (GetKeyNamesResponse) {}

  // Obtains Stored Public Keys
  rpc GetKeys(EmptyMessage) returns (GetKeysResponse) {}

  // Generates new Keypair
  rpc GenerateKeyPair(GenerateEntityRequest) returns (Entity) {}

  // Encrypt/Decrypt File
  rpc EncryptFile(FilePacket) returns (EncryptResult) {}
  rpc DecryptFile(DecryptRequest) returns (FilePacket) {}
  
  // Internal FileStorage Mods
  rpc ModifyEntity(EntityMod) returns (EmptyMessage) {}
  
  // Lists stored path contents
  rpc ListPathContents(ListPathContentRequest) returns (PathResponse) {}
  rpc ListInternalBackups(EmptyMessage) returns (BackupEntries) {}
  rpc InvokeNewStorageBackup(EmptyMessage) returns (BackupEntry) {}
}

// ENCRYPT/DECRYPT
message FilePacket {
  bytes       FileBytes = 1;
  int64       SizeInBytes = 2;
  string      FileName = 3;
  FileOptions options = 4;
}

message FileOptions {
  bool    Overwrite = 1;
  string  StoragePath = 2;
  string  KeyName = 3;
}

message DecryptRequest {
  string FilePath = 1;
  bytes PrivateKeyName = 2;
}

message EncryptResult {
  string FileStoragePath = 1;
  string FileId = 2;
}

// MOD
message EntityMod {
  string FilePath = 1;
  bool Remove = 2;
}

// ENTITY
message Entity {
  string Name = 1;
  bytes PublicKeyName = 2;
}

message GenerateEntityRequest {
  string Name = 1;
}

// KEYS
message GetKeysResponse {
  repeated Entity Entities = 1;
}

message GetKeyNamesResponse {
  repeated string Keys = 1;
}

// PATHS
message ListPathContentRequest {
  string Path = 1;
  bool Recursive = 2;
}

message ContentType {
  string Name = 1;
  string Path = 2;
  uint64 SizeInBytes = 3;
  uint64 CreatedUnixTimestamp = 4;
  uint64 ModifiedUnixTimestamp = 5;
}

message PathResponse {
  repeated ContentType Content = 1;
}

// BACKUPS
message BackupEntry {
  string      FileName = 1;
  uint64      CreatedUnixTimestamp = 2;
  uint64      ExpiresInUnixTimestamp = 3;
}
message BackupEntries {
  repeated BackupEntry Backups = 1;
}

// MISC
message EmptyMessage {}
